{
  "author": {
    "name": "Aaron Heckmann",
    "email": "aaron.heckmann+github@gmail.com"
  },
  "name": "gridform",
  "description": "Stream formidable uploads into MongoDB GridFS",
  "version": "0.1.7",
  "keywords": [
    "gridfs",
    "formidable",
    "mongodb",
    "upload",
    "file"
  ],
  "scripts": {
    "test": "make test"
  },
  "main": "./lib/index.js",
  "dependencies": {
    "formidable": "1.0.14",
    "gridfs-stream": "0.5.0"
  },
  "devDependencies": {
    "mocha": "1.18.2",
    "mongodb": "1.4.3"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/aheckmann/gridform.git"
  },
  "readme": "#gridform\n======================\n\n[Formidable](https://github.com/felixge/node-formidable) streams uploads to the file system by default. If you're using GridFS to store files you'll then need to turn around and copy them off of the file system. Using `gridform` removes this burden.\n\nExample:\n\n```js\nvar mongo = require('mongodb')\nvar gridform = require('gridform');\n\n// assuming you've already created a db instance and opened it\ngridform.db = db;\ngridform.mongo = mongo;\n\n// in your http server\nvar app = http.Server(function (req, res) {\n\n  // create a gridform\n  var form = gridform();\n\n  // returns a custom IncomingForm\n  assert(form instanceof formidable.IncomingForm);\n\n  // optionally store per-file metadata\n  form.on('fileBegin', function (name, file) {\n    file.metadata = 'so meta'\n  })\n\n  // parse normally\n  form.parse(req, function (err, fields, files) {\n\n    // use files and fields as you do today\n    var file = files.upload;\n\n    file.name // the uploaded file name\n    file.type // file type per [mime](https://github.com/bentomas/node-mime)\n    file.size // uploaded file size (file length in GridFS) named \"size\" for compatibility\n    file.path // same as file.name. included for compatibility\n    file.lastModified // included for compatibility\n\n    // files contain additional gridfs info\n    file.root // the root of the files collection used in MongoDB ('fs' here means the full collection in mongo is named 'fs.files')\n    file.id   // the ObjectId for this file\n\n  });\n});\n```\n\n## install\n\n```\nnpm install gridform\n```\n\n## exports\n\nThe module exports a function which takes an options object.\n\n```js\nvar gridform = require('gridform');\nvar options = { db: db, mongo: mongo, filename: fn };\nvar form = gridform(options);\n```\n\nAvailable options:\n\n  - db: an open [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) db instance\n  - mongo: the [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver you are using\n  - filename: function\n\nThe optional `filename` function is passed the `file.name` before streaming to MongoDB providing an opportunity to return a customized filename with a prefix etc.\n\n`db` and `mongo` are required unless you've specified them on `gridform` itself.\n\n```js\nvar gridform = require('gridform');\ngridform.db = db;\ngridform.mongo = mongo;\nvar form = gridform(); // all good\n```\n\nThe gridform function returns an instance of `formidable.IncomingForm` so you can process uploads without changing any code.\n\n## gridfs-stream\n\nThis module utilizes the [gridfs-stream](https://github.com/aheckmann/gridfs-stream) module which is exposed as `require('gridform').gridfsStream`.\n\n## tests\n\nRun the tests with `make test`.\n\n[LICENCE](https://github.com/aheckmann/gridform/blob/master/LICENSE)\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aheckmann/gridform/issues"
  },
  "homepage": "https://github.com/aheckmann/gridform",
  "_id": "gridform@0.1.7",
  "_shasum": "1c0d904ab04882221cbc94cf624c1773db4e901e",
  "_from": "gridform@",
  "_resolved": "https://registry.npmjs.org/gridform/-/gridform-0.1.7.tgz"
}
